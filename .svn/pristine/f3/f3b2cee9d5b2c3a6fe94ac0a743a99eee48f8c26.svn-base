using eSyaOutPatient.DL.Entities;
using eSyaOutPatient.DO;
using eSyaOutPatient.IF;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace eSyaOutPatient.DL.Repository
{
    public class PreOperativeRepository : IPreOperativeRepository
    {
        public async Task<DO_ReturnParameter> InsertIntoPreOperativeInformation(DO_PreOperativeInformation obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        foreach (var c in obj.l_ControlValue)
                        {
                            var exist = db.GtOpclin.Where(w => w.BusinessKey == obj.BusinessKey && w.Uhid == obj.UHID && w.Vnumber == obj.VisitNumber && w.ClcontrolId == c.CLControlID).FirstOrDefault();
                            if (exist != null)
                            {
                                if (c.Value == null)
                                {
                                    exist.ActiveStatus = false;
                                }
                                else
                                {

                                    // Updating follow-up reminder list
                                    // 'S' : Surgical follow-up - 'R' Nutrition follow-up
                                    if (c.CLControlID == "FS1-1" || c.CLControlID == "FS3-1" || c.CLControlID == "FS4-1")
                                    {
                                        if (exist.Value != c.Value)
                                        {
                                            var r_list = db.GtEfopsi.Where(w => w.ActiveStatus && w.BusinessKey == obj.BusinessKey && w.RUhid == obj.UHID).ToList();
                                            foreach (var r in r_list)
                                            {
                                                r.ActiveStatus = false;
                                                r.ModifiedBy = obj.UserID;
                                                r.ModifiedOn = System.DateTime.Now;
                                                r.ModifiedTerminal = obj.TerminalID;
                                            }
                                            var sch_ms = db.GtEsopsi
                                                .Where(w => w.ActiveStatus && w.BusinessKey == obj.BusinessKey
                                                && (w.FollowType == "S" || w.FollowType == "R")
                                                )
                                                .Select(r => new DO_AppointmentFollowup
                                                {
                                                    BusinessKey = r.BusinessKey,
                                                    FollowType = r.FollowType,
                                                    ScheduleInterval = r.ScheduleInterval
                                                }).ToList();
                                            foreach (var sch in sch_ms)
                                            {
                                                GtEfopsi sch_r = new GtEfopsi
                                                {
                                                    BusinessKey = sch.BusinessKey,
                                                    RUhid = obj.UHID,
                                                    FollowType = sch.FollowType,
                                                    UpcomingScheduleDate = Convert.ToDateTime(c.Value).AddDays(sch.ScheduleInterval),

                                                    ActiveStatus = true,
                                                    CreatedBy = obj.UserID,
                                                    CreatedOn = System.DateTime.Now,
                                                    CreatedTerminal = obj.TerminalID
                                                };
                                                db.GtEfopsi.Add(sch_r);
                                            }

                                            var survey = db.GtMaprem.Where(w => w.BusinessKey == obj.BusinessKey && w.Uhid == obj.UHID && w.Vnumber == obj.VisitNumber && !w.ConfirmedStatus).FirstOrDefault();
                                            if (survey != null)
                                            {
                                                survey.ReminderDate = Convert.ToDateTime(c.Value).AddDays(30);
                                                survey.ModifiedBy = obj.UserID;
                                                survey.ModifiedOn = System.DateTime.Now;
                                                survey.ModifiedTerminal = obj.TerminalID;
                                            }
                                        }

                                    }


                                    // Update record
                                    exist.ValueType = c.ValueType;
                                    exist.Value = c.Value;
                                    exist.ActiveStatus = true;
                                    exist.ModifiedBy = obj.UserID;
                                    exist.ModifiedOn = System.DateTime.Now;
                                    exist.ModifiedTerminal = obj.TerminalID;
                                }
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(c.Value))
                                {
                                    GtOpclin cl = new GtOpclin
                                    {
                                        BusinessKey = obj.BusinessKey,
                                        Uhid = obj.UHID,
                                        Vnumber = obj.VisitNumber,
                                        TransactionId = 0,
                                        TransactionDate = obj.TransactionDate,
                                        Cltype = c.CLType,
                                        ClcontrolId = c.CLControlID,
                                        ValueType = c.ValueType,
                                        Value = c.Value,
                                        ActiveStatus = true,
                                        FormId = obj.FormID,
                                        CreatedBy = obj.UserID,
                                        CreatedOn = System.DateTime.Now,
                                        CreatedTerminal = obj.TerminalID
                                    };
                                    db.GtOpclin.Add(cl);

                                    // Creating follow-up reminder list
                                    // 'S' : Surgical follow-up - 'R' Nutrition follow-up
                                    if (c.CLControlID == "FS1-1" || c.CLControlID == "FS3-1" || c.CLControlID == "FS1-4")
                                    {
                                        var sch_ms = db.GtEsopsi
                                            .Where(w => w.ActiveStatus && w.BusinessKey == obj.BusinessKey
                                            && (w.FollowType == "S" || w.FollowType == "R")
                                            )
                                            .Select(r => new DO_AppointmentFollowup
                                            {
                                                BusinessKey = r.BusinessKey,
                                                FollowType = r.FollowType,
                                                ScheduleInterval = r.ScheduleInterval
                                            }).ToList();
                                        foreach (var sch in sch_ms)
                                        {
                                            GtEfopsi sch_r = new GtEfopsi
                                            {
                                                BusinessKey = sch.BusinessKey,
                                                RUhid = obj.UHID,
                                                FollowType = sch.FollowType,
                                                UpcomingScheduleDate = Convert.ToDateTime(c.Value).AddDays(sch.ScheduleInterval),

                                                ActiveStatus = true,
                                                CreatedBy = obj.UserID,
                                                CreatedOn = System.DateTime.Now,
                                                CreatedTerminal = obj.TerminalID
                                            };
                                            db.GtEfopsi.Add(sch_r);
                                        }

                                        // Create Patient Survey reminder
                                        GtMaprem survey = new GtMaprem
                                        {
                                            BusinessKey = obj.BusinessKey,
                                            Uhid = obj.UHID,
                                            Vnumber = obj.VisitNumber,
                                            ReminderType = "RT",
                                            ReminderDate = Convert.ToDateTime(c.Value).AddDays(30),
                                            ConfirmedStatus = false,
                                            ActiveStatus = false,
                                            FormId="0",
                                            CreatedBy=obj.UserID,
                                            CreatedOn=System.DateTime.Now,
                                            CreatedTerminal=obj.TerminalID                                             
                                        };
                                        db.GtMaprem.Add(survey);
                                    }
                                }
                            }
                        }

                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Saved Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> InsertPatientClinicalInformation(DO_PreOperativeInformation obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        var sl = db.GtOpclin.Where(w => w.BusinessKey == obj.BusinessKey && w.Uhid == obj.UHID && w.Vnumber == obj.VisitNumber).Select(s => s.TransactionId).DefaultIfEmpty(0).Max() + 1;

                        int chartNumber = 0;


                        foreach (var c in obj.l_ControlValue)
                        {
                            if (!string.IsNullOrEmpty(c.Value))
                            {
                                GtOpclin cl = new GtOpclin
                                {
                                    BusinessKey = obj.BusinessKey,
                                    Uhid = obj.UHID,
                                    Vnumber = obj.VisitNumber,
                                    TransactionId = sl,
                                    TransactionDate = obj.TransactionDate,
                                    Cltype = c.CLType,
                                    ClcontrolId = c.CLControlID,
                                    ValueType = c.ValueType,
                                    Value = c.Value,
                                    ChartNumber = chartNumber,
                                    ActiveStatus = true,
                                    FormId = obj.FormID,
                                    CreatedBy = obj.UserID,
                                    CreatedOn = System.DateTime.Now,
                                    CreatedTerminal = obj.TerminalID
                                };
                                db.GtOpclin.Add(cl);
                            }
                        }

                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Saved Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<List<DO_PreOperativeInformation>> GetPreOperativeInformation(int businessKey, int UHID, int vNumber, string clType)
        {
            using (var db = new eSyaEnterprise())
            {
                var po = await db.GtOpclin
                        //.Where(w => w.BusinessKey == businessKey && w.Uhid == UHID && w.Vnumber == vNumber
                        .Where(w => w.BusinessKey == businessKey && w.Uhid == UHID && (w.Vnumber == vNumber || w.Vnumber == 0)
                           && clType.Contains(w.Cltype) && w.ActiveStatus)
                        .Select(x => new DO_PreOperativeInformation
                        {
                            CLControlID = x.ClcontrolId,
                            CLType = x.Cltype,
                            Value = x.Value,
                            ValueType = x.ValueType
                        }).ToListAsync();


                return po;
            }
        }

        public async Task<List<DO_PreOperativeInformation>> GetInformationValueView(int businessKey, int UHID, int vNumber, string clType)
        {
            using (var db = new eSyaEnterprise())
            {
                var ip = await db.GtOpclin
                        .Where(w => w.BusinessKey == businessKey && w.Uhid == UHID && (w.Vnumber == vNumber || vNumber == -1)
                           && w.Cltype == clType && w.ActiveStatus)
                        .Select(x => new DO_PreOperativeInformation
                        {
                            TransactionID = x.TransactionId,
                            TransactionDate = x.TransactionDate,
                            VisitNumber = Convert.ToInt32(x.Vnumber)

                        }).Distinct().ToListAsync();

                var cl = ip.Select(x => new DO_PreOperativeInformation
                {
                    TransactionID = x.TransactionID,
                    TransactionDate = x.TransactionDate,
                    VisitNumber = x.VisitNumber,
                    ChartNumber = x.ChartNumber,
                    l_ControlValue = db.GtOpclin.Where(w => w.BusinessKey == businessKey && w.Uhid == UHID && w.Vnumber == x.VisitNumber
                                                            && w.Cltype == clType && w.TransactionId == x.TransactionID && w.ActiveStatus)
                                        .Select(c => new DO_ControlValue
                                        {
                                            CLControlID = c.ClcontrolId,
                                            CLType = c.Cltype,
                                            Value = c.Value,

                                        }).ToList()
                }).OrderBy(o => o.TransactionDate).ToList();


                return cl;
            }
        }

        public async Task<List<DO_PreOperativeInformation>> GetClinicalInformationValueByTransaction(int businessKey, int UHID, int vNumber, int transactionID)
        {
            using (var db = new eSyaEnterprise())
            {
                var r = await db.GtOpclin
                        .Where(w => w.BusinessKey == businessKey && w.Uhid == UHID && w.Vnumber == vNumber
                           && w.TransactionId == transactionID
                           && w.ActiveStatus)
                        .Select(x => new DO_PreOperativeInformation
                        {
                            TransactionID = x.TransactionId,
                            TransactionDate = x.TransactionDate,
                            ChartNumber = x.ChartNumber,
                            CLControlID = x.ClcontrolId,
                            ValueType = x.ValueType,
                            Value = x.Value
                        }).OrderBy(o => o.TransactionDate).ToListAsync();

                return r;
            }
        }

        public async Task<DO_ReturnParameter> UpdatePatientClinicalInformation(DO_PreOperativeInformation obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {

                        foreach (var c in obj.l_ControlValue)
                        {
                            if (!string.IsNullOrEmpty(c.Value))
                            {
                                var cl = db.GtOpclin.Where(w => w.BusinessKey == obj.BusinessKey
                                            && w.Uhid == obj.UHID && w.Vnumber == obj.VisitNumber
                                            && w.TransactionId == obj.TransactionID
                                            && w.ClcontrolId == c.CLControlID).FirstOrDefault();
                                if (cl == null)
                                {
                                    cl = new GtOpclin
                                    {
                                        BusinessKey = obj.BusinessKey,
                                        Uhid = obj.UHID,
                                        Vnumber = obj.VisitNumber,
                                        TransactionId = obj.TransactionID,
                                        TransactionDate = obj.TransactionDate,
                                        Cltype = c.CLType,
                                        ClcontrolId = c.CLControlID,
                                        ValueType = c.ValueType,
                                        Value = c.Value,
                                        ActiveStatus = true,
                                        FormId = obj.FormID,
                                        CreatedBy = obj.UserID,
                                        CreatedOn = System.DateTime.Now,
                                        CreatedTerminal = obj.TerminalID
                                    };
                                    db.GtOpclin.Add(cl);
                                }
                                else
                                {
                                    cl.ValueType = c.ValueType;
                                    cl.Value = c.Value;
                                    cl.ActiveStatus = obj.ActiveStatus;
                                    cl.ModifiedBy = obj.UserID;
                                    cl.ModifiedOn = System.DateTime.Now;
                                    cl.ModifiedTerminal = obj.TerminalID;
                                }
                            }
                        }

                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Saved Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> DeletePatientClinicalInformation(DO_PreOperativeInformation obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {

                        foreach (var c in obj.l_ControlValue)
                        {

                                var cl = db.GtOpclin.Where(w => w.BusinessKey == obj.BusinessKey
                                            && w.Uhid == obj.UHID && w.Vnumber == obj.VisitNumber
                                            && w.TransactionId == obj.TransactionID
                                            && w.ClcontrolId == c.CLControlID).FirstOrDefault();
                                if (cl != null)
                                {
                                    cl.ActiveStatus = false;
                                    cl.ModifiedBy = obj.UserID;
                                    cl.ModifiedOn = System.DateTime.Now;
                                    cl.ModifiedTerminal = obj.TerminalID;
                                }
                           
                        }

                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Deleted Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<List<DO_PreOperativeInformation>> GetFormDetailByType(int businessKey, int UHID, string fType)
        {
            using (var db = new eSyaEnterprise())
            {
                if (fType == "All")
                {
                    var r = await db.GtOpclin
                        .Where(w => w.BusinessKey == businessKey && w.Uhid == UHID
                           && (w.Cltype.Substring(0, 2) == "PO" || w.Cltype.Substring(0, 2) == "FS" || w.Cltype.Substring(0, 2) == "SF" || w.Cltype.Substring(0, 2) == "NF")
                           && w.ActiveStatus)
                        .Select(x => new DO_PreOperativeInformation
                        {
                            TransactionDate = x.TransactionDate,
                            CLType = x.Cltype.Substring(0, 2),
                            VisitNumber = Convert.ToInt32(x.Vnumber)
                        }).Distinct().OrderByDescending(o => o.TransactionDate).ToListAsync();
                    r = r.GroupBy(d => new { d.VisitNumber, d.CLType }).Select(d => d.First()).ToList();
                    return r;
                }
                else
                {
                    var r = await db.GtOpclin
                        .Where(w => w.BusinessKey == businessKey && w.Uhid == UHID
                           && w.Cltype.Substring(0, 2) == fType
                           && w.ActiveStatus)
                        .Select(x => new DO_PreOperativeInformation
                        {
                            TransactionDate = x.TransactionDate,
                            CLType = x.Cltype.Substring(0, 2),
                            VisitNumber = Convert.ToInt32(x.Vnumber)
                        }).Distinct().OrderByDescending(o => o.TransactionDate).ToListAsync();
                    r = r.GroupBy(d => new { d.VisitNumber, d.CLType }).Select(d => d.First()).ToList();
                    return r;
                }

            }
        }

    }
}
